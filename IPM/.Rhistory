minsize = max(0.5,min(Datashort$Size0Mars[Datashort$age0==AgeMax], na.rm=T)-0.5)
maxsize = 0.5+max(Datashort$Size0Mars[Datashort$age0==AgeMax], na.rm=T)
ha1 = (maxsize-minsize)/n.size
b = minsize+c(0:n.size)*ha1
y.a1 = 0.5*(b[1:n.size]+b[2:(n.size+1)])
}
# midpoints for an individual of age 1
minsize = max(0.5,min(Dataglob$Size0Mars[Dataglob$age0==1], na.rm=T)-0.5)
maxsize = 0.5+max(Dataglob$Size0Mars[Dataglob$age0==1], na.rm=T)
h1 = (maxsize-minsize)/n.size
b = minsize+c(0:n.size)*h1
y.1 = 0.5*(b[1:n.size]+b[2:(n.size+1)])
#The growth kernel
G <- ha1*outer(y.a1, y.a, Gyx0, a=age)
####the following to make G sum to 1.0 in the event that there is some 'eviction' of individuals
for(i in 1:(n.size/2)) G[1,i]<-G[1,i]+1-sum(G[,i])
for(i in (n.size/2+1):n.size) G[n.size,i]<-G[n.size,i]+1-sum(G[,i])
#The survival-growth kernel #remove  flowering plants since they died
S_flr <- sx0(y.a,age)*(1-flr0(y.a,age, Beta))
Ps <- sweep(G, MARGIN=2, S_flr, '*')
P <- matrix(Ps, nrow=n.size)
#Fecundity
Fec <- h1*outer(y.1, y.a, fyx0 , a=age, Estbl=estbl, Beta=Beta, intervalle=h1)*sx0(y.1,1)
IPMk=P+Fec
return(list(M=IPMk,Pk=P,Fk=Fec))
}
K.fnc0(age, n.size, estbl, Beta=0)
# Compute kernel
K.fnc0 <- function(age, n.size, estbl, Beta=0) {
# midpoints for an individual of age a
minsize = max(0.5,min(centauree_data$Size0Mars[centauree_data$age0==age], na.rm=T)-0.5)
maxsize = 0.5+max(centauree_data$Size0Mars[centauree_data$age0==age], na.rm=T)
h = (maxsize - minsize) / n.size
b = minsize + c(0:n.size) * h
y.a = 0.5 * (b[1:n.size] + b[2:(n.size + 1)])
# midpoints for an individual of age a+1 (a1)
if (age != AgeMax) {
minsize = max(0.5,min(centauree_data$Size0Mars[centauree_data$age0==(age+1)], na.rm=T)-0.5)
maxsize = 0.5+max(centauree_data$Size0Mars[centauree_data$age0==(age+1)], na.rm=T)
ha1 = (maxsize - minsize) / n.size
b = minsize + c(0:n.size) * ha1
y.a1 = 0.5 * (b[1:n.size] + b[2:(n.size + 1)])
} else {
minsize = max(0.5,min(centauree_data$Size0Mars[centauree_data$age0==AgeMax], na.rm=T)-0.5)
maxsize = 0.5+max(centauree_data$Size0Mars[centauree_data$age0==AgeMax], na.rm=T)
ha1 = (maxsize - minsize) / n.size
b = minsize + c(0:n.size) * ha1
y.a1 = 0.5 * (b[1:n.size] + b[2:(n.size + 1)])
}
# midpoints for an individual of age 1
minsize = max(0.5,min(centauree_data_complet$Size0Mars[centauree_data_complet$age0==1], na.rm=T) - 0.5)
maxsize = 0.5 + max(centauree_data_complet$Size0Mars[centauree_data_complet$age0 == 1], na.rm = T)
h1 = (maxsize - minsize) / n.size
b = minsize + c(0:n.size) * h1
y.1 = 0.5 * (b[1:n.size] + b[2:(n.size + 1)])
#The growth kernel
G <- ha1*outer(y.a1, y.a, Gyx0, a=age)
####the following to make G sum to 1.0 in the event that there is some 'eviction' of individuals
for(i in 1:(n.size/2)) G[1,i]<-G[1,i]+1-sum(G[,i])
for(i in (n.size/2+1):n.size) G[n.size,i]<-G[n.size,i]+1-sum(G[,i])
#The survival-growth kernel #remove  flowering plants since they died
S_flr <- sx0(y.a,age)*(1-flr0(y.a,age, Beta))
Ps <- sweep(G, MARGIN=2, S_flr, '*')
P <- matrix(Ps, nrow=n.size)
#Fecundity
Fec <- h1*outer(y.1, y.a, fyx0 , a=age, Estbl=estbl, Beta=Beta, intervalle=h1)*sx0(y.1,1)
IPMk=P+Fec
return(list(M=IPMk,Pk=P,Fk=Fec))
}
K.fnc0(age, n.size, estbl, Beta=0)
sumary(fake_data)
summary(fake_data)
#The growth kernel
G <- ha1*outer(y.a1, y.a, Gyx0, a=age)
# midpoints for an individual of age a
minsize = max(0.5,min(centauree_data$Size0Mars[centauree_data$age0==age], na.rm=T)-0.5)
maxsize = 0.5+max(centauree_data$Size0Mars[centauree_data$age0==age], na.rm=T)
h = (maxsize - minsize) / n.size
b = minsize + c(0:n.size) * h
y.a = 0.5 * (b[1:n.size] + b[2:(n.size + 1)])
# midpoints for an individual of age a+1 (a1)
if (age != AgeMax) {
minsize = max(0.5,min(centauree_data$Size0Mars[centauree_data$age0==(age+1)], na.rm=T)-0.5)
maxsize = 0.5+max(centauree_data$Size0Mars[centauree_data$age0==(age+1)], na.rm=T)
ha1 = (maxsize - minsize) / n.size
b = minsize + c(0:n.size) * ha1
y.a1 = 0.5 * (b[1:n.size] + b[2:(n.size + 1)])
} else {
minsize = max(0.5,min(centauree_data$Size0Mars[centauree_data$age0==AgeMax], na.rm=T)-0.5)
maxsize = 0.5+max(centauree_data$Size0Mars[centauree_data$age0==AgeMax], na.rm=T)
ha1 = (maxsize - minsize) / n.size
b = minsize + c(0:n.size) * ha1
y.a1 = 0.5 * (b[1:n.size] + b[2:(n.size + 1)])
}
# midpoints for an individual of age 1
minsize = max(0.5,min(centauree_data_complet$Size0Mars[centauree_data_complet$age0==1], na.rm=T) - 0.5)
maxsize = 0.5 + max(centauree_data_complet$Size0Mars[centauree_data_complet$age0 == 1], na.rm = T)
h1 = (maxsize - minsize) / n.size
b = minsize + c(0:n.size) * h1
y.1 = 0.5 * (b[1:n.size] + b[2:(n.size + 1)])
#The growth kernel
G <- ha1*outer(y.a1, y.a, Gyx0, a=age)
####the following to make G sum to 1.0 in the event that there is some 'eviction' of individuals
for(i in 1:(n.size/2)) G[1,i]<-G[1,i]+1-sum(G[,i])
for(i in (n.size/2+1):n.size) G[n.size,i]<-G[n.size,i]+1-sum(G[,i])
#Fecundity
numbofcap <- function(x,a) {
sortie <- fake_data$CapituleNbr[fake_data$age0==a & fake_data$Size0Mars==x][[1]]
return(matrix(sortie,MatrixDim,MatrixDim,byrow = T ))
}
#Survival Probability
sx0 <- function(x,a) {
sortie <- fake_data$SurvivalProbab[fake_data$age0==a & fake_data$Size0Mars==x]
return(mean(sortie))}
#Flowering Probability
#Beta = will be used to modify the intercept of the flowering function
#obs_beta = observed value
#extract Beta0
load("obs_beta")
load("se_obs_beta")
#Flowering function for The survival-growth kernel
flr0 <- function(x,a,Beta=0) {
sortie <- fake_data$FloweringProba[fake_data$age0==a & fake_data$Size0Mars==x] + Beta
return(mean(sortie))
}
#Flowering function for fecundity fyx0 - same function the difference is in the format of the output
flr1 <- function(x,a,Beta=0) {
sortie <- fake_data$FloweringProba[fake_data$age0==a & fake_data$Size0Mars==x] + Beta
sortie2=mean(sortie)
return(matrix(sortie2,MatrixDim,MatrixDim,byrow = T ))
}
#Growth function
Gyx0 <- function (y,x,a) {
sortie <- fake_data$Size1[fake_data$age0==a & fake_data$Size0Mars==x]
M <- matrix(mean(sortie),MatrixDim,MatrixDim, byrow=T)
SD <- sd(sortie)
return(dnorm(y,mean=M,sd=SD))
}
#Combine fecundity and flowering probability
fyx0 <- function(y, x ,a, Estbl, Beta=0, intervalle) {
#flowering probability:
p.flow <-flr1(x,a, Beta)
#number of capitula per flowering plant
n.captl <-numbofcap(x,a)
#Seedlings Size distribution
ProporSeedlSize=densSeedl(y, intervalle)
Fyx0=ifelse((p.flow*n.captl*Estbl*ProporSeedlSize) >=0,p.flow*n.captl*Estbl*ProporSeedlSize,0)
return(Fyx0)
}
# midpoints for an individual of age a
minsize = max(0.5,min(centauree_data$Size0Mars[centauree_data$age0==age], na.rm=T)-0.5)
maxsize = 0.5+max(centauree_data$Size0Mars[centauree_data$age0==age], na.rm=T)
h = (maxsize - minsize) / n.size
b = minsize + c(0:n.size) * h
y.a = 0.5 * (b[1:n.size] + b[2:(n.size + 1)])
# midpoints for an individual of age a+1 (a1)
if (age != AgeMax) {
minsize = max(0.5,min(centauree_data$Size0Mars[centauree_data$age0==(age+1)], na.rm=T)-0.5)
maxsize = 0.5+max(centauree_data$Size0Mars[centauree_data$age0==(age+1)], na.rm=T)
ha1 = (maxsize - minsize) / n.size
b = minsize + c(0:n.size) * ha1
y.a1 = 0.5 * (b[1:n.size] + b[2:(n.size + 1)])
} else {
minsize = max(0.5,min(centauree_data$Size0Mars[centauree_data$age0==AgeMax], na.rm=T)-0.5)
maxsize = 0.5+max(centauree_data$Size0Mars[centauree_data$age0==AgeMax], na.rm=T)
ha1 = (maxsize - minsize) / n.size
b = minsize + c(0:n.size) * ha1
y.a1 = 0.5 * (b[1:n.size] + b[2:(n.size + 1)])
}
# midpoints for an individual of age 1
minsize = max(0.5,min(centauree_data_complet$Size0Mars[centauree_data_complet$age0==1], na.rm=T) - 0.5)
maxsize = 0.5 + max(centauree_data_complet$Size0Mars[centauree_data_complet$age0 == 1], na.rm = T)
h1 = (maxsize - minsize) / n.size
b = minsize + c(0:n.size) * h1
y.1 = 0.5 * (b[1:n.size] + b[2:(n.size + 1)])
#The growth kernel
G <- ha1*outer(y.a1, y.a, Gyx0, a=age)
y.a
y.a1
SurvData=Datashort[Datashort$Flowering0!=1,]
spaMM.options(separation_max=70)
#Fecundity
CptlLm0=fitme(Cptl0~ Size0Mars, data = Datashort[which(Datashort$Flowering0!=0),])
numbofcap=function(x,a) {
fake$age0=a
fake$Size0Mars=unique(x)
sortie=predict(CptlLm0, fake)
sortie2=aggregate(sortie,list(fake$Size0Mars),mean)
return(matrix(sortie2$V1,MatrixDim,MatrixDim,byrow = T ))
}
#survival Probability Flowering Individuals are removed
SurvData=Datashort[Datashort$Flowering0!=1,]
SurvGlm=fitme(SurvieMars ~ Size0Mars + s2 + age0 + (1|Pop) + (1|year) + (age0|year) , family = binomial, data=SurvData)
Gyx0 <- function (y,x,a) {
fake$age0=a
fake$Size0Mars=unique(x)
fake$s2=fake$Size0Mars^2
sortie <- predict(GrowthGlm,fake,re.form=~ (s2|year)+ (1|year)+ (1|Pop), allow.new.levels=T)
sortie2=aggregate(sortie,list(fake$Size0Mars),mean)
M<-matrix(sortie2$V1,MatrixDim,MatrixDim, byrow = T)
Sdev <- predict(SDlm, data.frame(sizesObserved=x))
return(dnorm(y,mean=M,sd=Sdev))
}
# Compute kernel
K.fnc0<-function(age,n.size,estbl, Beta) {
# midpoints for an individual of age a
minsize = max(0.5,min(Datashort$Size0Mars[Datashort$age0==age], na.rm=T)-0.5)
maxsize = 0.5+max(Datashort$Size0Mars[Datashort$age0==age], na.rm=T)
h = (maxsize-minsize)/n.size
b = minsize+c(0:n.size)*h
y.a = 0.5*(b[1:n.size]+b[2:(n.size+1)])
# midpoints for an individual of age a+1 (a1)
if (age != AgeMax) {
minsize = max(0.5,min(Datashort$Size0Mars[Datashort$age0==(age+1)], na.rm=T)-0.5)
maxsize = 0.5+max(Datashort$Size0Mars[Datashort$age0==(age+1)], na.rm=T)
ha1 = (maxsize-minsize)/n.size
b = minsize+c(0:n.size)*ha1
y.a1 = 0.5*(b[1:n.size]+b[2:(n.size+1)])
} else {
minsize = max(0.5,min(Datashort$Size0Mars[Datashort$age0==AgeMax], na.rm=T)-0.5)
maxsize = 0.5+max(Datashort$Size0Mars[Datashort$age0==AgeMax], na.rm=T)
ha1 = (maxsize-minsize)/n.size
b = minsize+c(0:n.size)*ha1
y.a1 = 0.5*(b[1:n.size]+b[2:(n.size+1)])
}
# midpoints for an individual of age 1
minsize = max(0.5,min(Dataglob$Size0Mars[Dataglob$age0==1], na.rm=T)-0.5)
maxsize = 0.5+max(Dataglob$Size0Mars[Dataglob$age0==1], na.rm=T)
h1 = (maxsize-minsize)/n.size
b = minsize+c(0:n.size)*h1
y.1 = 0.5*(b[1:n.size]+b[2:(n.size+1)])
#The growth kernel
G <- ha1*outer(y.a1, y.a, Gyx0, a=age)
####the following to make G sum to 1.0 in the event that there is some 'eviction' of individuals
for(i in 1:(n.size/2)) G[1,i]<-G[1,i]+1-sum(G[,i])
for(i in (n.size/2+1):n.size) G[n.size,i]<-G[n.size,i]+1-sum(G[,i])
#The survival-growth kernel #remove  flowering plants since they died
S_flr <- sx0(y.a,age)*(1-flr0(y.a,age, Beta))
Ps <- sweep(G, MARGIN=2, S_flr, '*')
P <- matrix(Ps, nrow=n.size)
#Fecundity
Fec <- h1*outer(y.1, y.a, fyx0 , a=age, Estbl=estbl, Beta=Beta, intervalle=h1)*sx0(y.1,1)
IPMk=P+Fec
return(list(M=IPMk,Pk=P,Fk=Fec))
}
# midpoints for an individual of age a
minsize = max(0.5,min(Datashort$Size0Mars[Datashort$age0==age], na.rm=T)-0.5)
maxsize = 0.5+max(Datashort$Size0Mars[Datashort$age0==age], na.rm=T)
h = (maxsize-minsize)/n.size
b = minsize+c(0:n.size)*h
y.a = 0.5*(b[1:n.size]+b[2:(n.size+1)])
# midpoints for an individual of age a+1 (a1)
if (age != AgeMax) {
minsize = max(0.5,min(Datashort$Size0Mars[Datashort$age0==(age+1)], na.rm=T)-0.5)
maxsize = 0.5+max(Datashort$Size0Mars[Datashort$age0==(age+1)], na.rm=T)
ha1 = (maxsize-minsize)/n.size
b = minsize+c(0:n.size)*ha1
y.a1 = 0.5*(b[1:n.size]+b[2:(n.size+1)])
} else {
minsize = max(0.5,min(Datashort$Size0Mars[Datashort$age0==AgeMax], na.rm=T)-0.5)
maxsize = 0.5+max(Datashort$Size0Mars[Datashort$age0==AgeMax], na.rm=T)
ha1 = (maxsize-minsize)/n.size
b = minsize+c(0:n.size)*ha1
y.a1 = 0.5*(b[1:n.size]+b[2:(n.size+1)])
}
# midpoints for an individual of age 1
minsize = max(0.5,min(Dataglob$Size0Mars[Dataglob$age0==1], na.rm=T)-0.5)
maxsize = 0.5+max(Dataglob$Size0Mars[Dataglob$age0==1], na.rm=T)
h1 = (maxsize-minsize)/n.size
b = minsize+c(0:n.size)*h1
y.1 = 0.5*(b[1:n.size]+b[2:(n.size+1)])
y.a1
y.a
#Fecundity
numbofcap <- function(x,a) {
sortie <- fake_data$CapituleNbr[fake_data$age0==a & fake_data$Size0Mars==x][[1]]
return(matrix(sortie,MatrixDim,MatrixDim,byrow = T ))
}
#Survival Probability
sx0 <- function(x,a) {
sortie <- fake_data$SurvivalProbab[fake_data$age0==a & fake_data$Size0Mars==x]
return(mean(sortie))}
#Flowering Probability
#Beta = will be used to modify the intercept of the flowering function
#obs_beta = observed value
#extract Beta0
load("obs_beta")
load("se_obs_beta")
#Flowering function for The survival-growth kernel
flr0 <- function(x,a,Beta=0) {
sortie <- fake_data$FloweringProba[fake_data$age0==a & fake_data$Size0Mars==x] + Beta
return(mean(sortie))
}
#Flowering function for fecundity fyx0 - same function the difference is in the format of the output
flr1 <- function(x,a,Beta=0) {
sortie <- fake_data$FloweringProba[fake_data$age0==a & fake_data$Size0Mars==x] + Beta
sortie2=mean(sortie)
return(matrix(sortie2,MatrixDim,MatrixDim,byrow = T ))
}
#Growth function
Gyx0 <- function (y,x,a) {
sortie <- fake_data$Size1[fake_data$age0==a & fake_data$Size0Mars==x]
M <- matrix(mean(sortie),MatrixDim,MatrixDim, byrow=T)
SD <- sd(sortie)
return(dnorm(y,mean=M,sd=SD))
}
#Combine fecundity and flowering probability
fyx0 <- function(y, x ,a, Estbl, Beta=0, intervalle) {
#flowering probability:
p.flow <-flr1(x,a, Beta)
#number of capitula per flowering plant
n.captl <-numbofcap(x,a)
#Seedlings Size distribution
ProporSeedlSize=densSeedl(y, intervalle)
Fyx0=ifelse((p.flow*n.captl*Estbl*ProporSeedlSize) >=0,p.flow*n.captl*Estbl*ProporSeedlSize,0)
return(Fyx0)
}
or an individual of age a
minsize = max(0.5,min(centauree_data$Size0Mars[centauree_data$age0==age], na.rm=T)-0.5)
maxsize = 0.5+max(centauree_data$Size0Mars[centauree_data$age0==age], na.rm=T)
h = (maxsize - minsize) / n.size
b = minsize + c(0:n.size) * h
y.a = 0.5 * (b[1:n.size] + b[2:(n.size + 1)])
# midpoints for an individual of age a+1 (a1)
if (age != AgeMax) {
minsize = max(0.5,min(centauree_data$Size0Mars[centauree_data$age0==(age+1)], na.rm=T)-0.5)
maxsize = 0.5+max(centauree_data$Size0Mars[centauree_data$age0==(age+1)], na.rm=T)
ha1 = (maxsize - minsize) / n.size
b = minsize + c(0:n.size) * ha1
y.a1 = 0.5 * (b[1:n.size] + b[2:(n.size + 1)])
} else {
minsize = max(0.5,min(centauree_data$Size0Mars[centauree_data$age0==AgeMax], na.rm=T)-0.5)
maxsize = 0.5+max(centauree_data$Size0Mars[centauree_data$age0==AgeMax], na.rm=T)
ha1 = (maxsize - minsize) / n.size
b = minsize + c(0:n.size) * ha1
y.a1 = 0.5 * (b[1:n.size] + b[2:(n.size + 1)])
}
# midpoints for an individual of age 1
minsize = max(0.5,min(centauree_data_complet$Size0Mars[centauree_data_complet$age0==1], na.rm=T) - 0.5)
maxsize = 0.5 + max(centauree_data_complet$Size0Mars[centauree_data_complet$age0 == 1], na.rm = T)
h1 = (maxsize - minsize) / n.size
b = minsize + c(0:n.size) * h1
y.1 = 0.5 * (b[1:n.size] + b[2:(n.size + 1)])
#The growth kernel
G <- ha1*outer(y.a1, y.a, Gyx0, a=age)
G
length(y.a)
fake
View(fake)
y.a
y.a1
#The survival-growth kernel #remove  flowering plants since they died
S_flr <- sx0(y.a,age)*(1-flr0(y.a,age, Beta))
Ps <- sweep(G, MARGIN=2, S_flr, '*')
P <- matrix(Ps, nrow=n.size)
flr0(0.65,a,Beta)
save(c(Survglm1,Cptlglm1), file="Models")
source("/media/loic/Commun/0Travail/Stage 2025 ISEM/Models/IPM/Predict.R", echo=TRUE)
save(Survglm1, file="ModelSurvie")
save(Survglm1,Cptlglm1, file="ModelSurvie")
load("ModelSurvie")
Survglm1
Cptlglm1
save(Survglm1,Cptlglm1,Growthglm1,Flowglm1, file="Models")
source("/media/loic/Commun/0Travail/Stage 2025 ISEM/Models/IPM/Predict.R", echo=TRUE)
fake_data <- expand.grid(
year = annees,
Pop = populations,
Size0Mars = NA,
age0 = age_range)
View(fake_data)
x <- 1
fake_data$Size0Mars <- unique(x)
View(fake_data)
sortie <- fake_data$CapituleNbr[fake_data$age0==a][[1]]
a <- 1
sortie <- fake_data$CapituleNbr[fake_data$age0==a][[1]]
sortie
fake_data$CapituleNbr[fake_data$age0==a]
fake_data %>% mutate(CapituleNbr = Cptlpredict1 <- predict(Cptlglm1, newdata = fake_data)[,1]
)
fake_data %>% mutate(CapituleNbr = Cptlpredict1 <- predict(Cptlglm1, newdata = fake_data)[,1]
)[fake_data$age0==a]
fake_data %>% mutate(CapituleNbr = Cptlpredict1 <- predict(Cptlglm1, newdata = fake_data)[,1]
)[fake_data$age0==a,]
fake_data %>% mutate(CapituleNbr = predict(Cptlglm1, newdata = fake_data)[,1])
fake_data %>% mutate(CapituleNbr = predict(Cptlglm1, newdata = fake_data)[,1])[fake_data$age0==1]
fake_data %>% mutate(CapituleNbr = predict(Cptlglm1, newdata = fake_data)[,1])[fake_data$age0==1,]
fake_data %>% mutate(CapituleNbr = predict(Cptlglm1, newdata = fake_data)[,1])$age0
fake_data$Size0Mars <- unique(x)
View(fake_data)
sortie <- fake_data %>% mutate(CapituleNbr = predict(Cptlglm1, newdata = fake_data)[,1])
sortie$CapituleNbr[fake_data$age0==a][[1]]
mean(sortie$CapituleNbr[fake_data$age0==a])
#Fecundity
numbofcap <- function(x,a) {
fake_data$Size0Mars <- unique(x)
sortie <- fake_data %>% mutate(CapituleNbr = predict(Cptlglm1, newdata = fake_data)[,1])
sortie2 <- mean(sortie$CapituleNbr[fake_data$age0==a])
return(matrix(sortie2,MatrixDim,MatrixDim,byrow = T ))
}
#Survival Probability
sx0 <- function(x,a) {
fake_data$Size0Mars <- unique(x)
sortie <- fake_data %>% mutate(SurvivalProba = predict(Survglm1, newdata = fake_data)[,1])
sortie2 <- mean(sortie$SurvivalProba[fake_data$age0==a])
return(mean(sortie))}
sx0(x,a)
#Survival Probability
sx0 <- function(x,a) {
fake_data$Size0Mars <- unique(x)
sortie <- fake_data %>% mutate(SurvivalProba = predict(Survglm1, newdata = fake_data)[,1])
sortie2 <- mean(sortie$SurvivalProba[fake_data$age0==a])
return(sortie2)}
sx0(x,a)
#Flowering function for The survival-growth kernel
flr0 <- function(x,a,Beta=0) {
fake_data$Size0Mars <- unique(x)
sortie <- fake_data %>% mutate(Flowering = predict(Flowglm1, newdata = fake_data)[,1] + Beta)
sortie2 <- mean(sortie$Flowering[fake_data$age0==a])
return(sortie2)}
flr0(x,a)
#Flowering function for fecundity fyx0 - same function the difference is in the format of the output
flr1 <- function(x,a,Beta=0) {
fake_data$Size0Mars <- unique(x)
sortie <- fake_data %>% mutate(Flowering = predict(Flowglm1, newdata = fake_data)[,1] + Beta)
sortie2 <- mean(sortie$Flowering[fake_data$age0==a])
return(matrix(sortie2,MatrixDim,MatrixDim,byrow = T ))
}
flr1(x,a)
MatrixDim=50 #size of matrices for integration
flr1(x,a)
#Growth function
Gyx0 <- function (y,x,a) {
sortie <- fake_data$Size1[fake_data$age0==a & fake_data$Size0Mars==x]
M <- matrix(mean(sortie),MatrixDim,MatrixDim, byrow=T)
SD <- sd(sortie)
return(dnorm(y,mean=M,sd=SD))
}
fake_data$Size0Mars <- unique(x)
sortie <- fake_data %>% mutate(Size1 = predict(Growthglm1, newdata = fake_data)[,1])
sortie2 <- mean(sortie$Size1[fake_data$age0==a])
sortie
sortie2
#Growth function
Gyx0 <- function (y,x,a) {
fake_data$Size0Mars <- unique(x)
sortie <- fake_data %>% mutate(Size1 = predict(Growthglm1, newdata = fake_data)[,1])
sortie2 <- mean(sortie$Size1[fake_data$age0==a])
M <- matrix(sortie2,MatrixDim,MatrixDim, byrow=T)
SD <- sd(sortie$Size1[fake_data$age0==a])
return(dnorm(y,mean=M,sd=SD))
}
Gyx0(2,1,1)
#Growth function
Gyx0 <- function (y,x,a) {
fake_data$Size0Mars <- unique(x)
sortie <- fake_data %>% mutate(Size1 = exp(predict(Growthglm1, newdata = fake_data)[,1]))
sortie2 <- mean(sortie$Size1[fake_data$age0==a])
M <- matrix(sortie2,MatrixDim,MatrixDim, byrow=T)
SD <- sd(sortie$Size1[fake_data$age0==a])
return(dnorm(y,mean=M,sd=SD))
}
Gyx0(2,1,1)
#Combine fecundity and flowering probability
fyx0 <- function(y, x ,a, Estbl, Beta=0, intervalle) {
#flowering probability:
p.flow <-flr1(x,a, Beta)
#number of capitula per flowering plant
n.captl <-numbofcap(x,a)
#Seedlings Size distribution
ProporSeedlSize=densSeedl(y, intervalle)
Fyx0=ifelse((p.flow*n.captl*Estbl*ProporSeedlSize) >=0,p.flow*n.captl*Estbl*ProporSeedlSize,0)
return(Fyx0)
}
# midpoints for an individual of age a
minsize = max(0.5,min(centauree_data$Size0Mars[centauree_data$age0==age], na.rm=T)-0.5)
age <- 1
n.size <- MatrixDim
estbl <- 0.4
Beta <- 0
# midpoints for an individual of age a
minsize = max(0.5,min(centauree_data$Size0Mars[centauree_data$age0==age], na.rm=T)-0.5)
maxsize = 0.5+max(centauree_data$Size0Mars[centauree_data$age0==age], na.rm=T)
h = (maxsize - minsize) / n.size
b = minsize + c(0:n.size) * h
y.a = 0.5 * (b[1:n.size] + b[2:(n.size + 1)])
# midpoints for an individual of age a+1 (a1)
if (age != AgeMax) {
minsize = max(0.5,min(centauree_data$Size0Mars[centauree_data$age0==(age+1)], na.rm=T)-0.5)
maxsize = 0.5+max(centauree_data$Size0Mars[centauree_data$age0==(age+1)], na.rm=T)
ha1 = (maxsize - minsize) / n.size
b = minsize + c(0:n.size) * ha1
y.a1 = 0.5 * (b[1:n.size] + b[2:(n.size + 1)])
} else {
minsize = max(0.5,min(centauree_data$Size0Mars[centauree_data$age0==AgeMax], na.rm=T)-0.5)
maxsize = 0.5+max(centauree_data$Size0Mars[centauree_data$age0==AgeMax], na.rm=T)
ha1 = (maxsize - minsize) / n.size
b = minsize + c(0:n.size) * ha1
y.a1 = 0.5 * (b[1:n.size] + b[2:(n.size + 1)])
}
maxsize = 0.5 + max(centauree_data_complet$Size0Mars[centauree_data_complet$age0 == 1], na.rm = T)
h1 = (maxsize - minsize) / n.size
b = minsize + c(0:n.size) * h1
y.1 = 0.5 * (b[1:n.size] + b[2:(n.size + 1)])
#The growth kernel
G <- ha1*outer(y.a1, y.a, Gyx0, a=age)
####the following to make G sum to 1.0 in the event that there is some 'eviction' of individuals
for(i in 1:(n.size/2)) G[1,i]<-G[1,i]+1-sum(G[,i])
y.a1
y.a
Gyx0(0.7,0.65,a)
