labs(x = "Years",
y = "Seedling survival (s1(1-a1))",
color = "Model")+
theme(
axis.title.x = element_text(size = 14),  # Taille du titre axe X
axis.title.y = element_text(size = 14),  # Taille du titre axe Y
axis.text.x = element_text(size = 12),   # Taille des graduations axe X
axis.text.y = element_text(size = 12)    # Taille des graduations axe Y
)
lht %>%
ggplot(aes(x=years))+
geom_line(aes(y=s2_1a2,color=as.factor(Model)),show.legend = FALSE)+
scale_color_manual(values = c("IPM" = "red", "MPM" = "black"))+
theme_bw()+
labs(x = "Years",
y = "Rosette survival (s2(1-a2))",
color = "Model")+
theme(
axis.title.x = element_text(size = 14),  # Taille du titre axe X
axis.title.y = element_text(size = 14),  # Taille du titre axe Y
axis.text.x = element_text(size = 12),   # Taille des graduations axe X
axis.text.y = element_text(size = 12)    # Taille des graduations axe Y
)
lht %>%
ggplot(aes(x=years))+
geom_line(aes(y=s2a2,color=as.factor(Model)),show.legend = FALSE)+
scale_color_manual(values = c("IPM" = "red", "MPM" = "black"))+
theme_bw()+
labs(x = "Years",
y = "Rosette flowering (s2a2)",
color = "Model")+
theme(
axis.title.x = element_text(size = 14),  # Taille du titre axe X
axis.title.y = element_text(size = 14),  # Taille du titre axe Y
axis.text.x = element_text(size = 12),   # Taille des graduations axe X
axis.text.y = element_text(size = 12)    # Taille des graduations axe Y
)
lht %>%
ggplot(aes(x=years))+
geom_line(aes(y=fs0,color=as.factor(Model)),show.legend = FALSE)+
scale_color_manual(values = c("IPM" = "red", "MPM" = "black"))+
theme_bw()+
labs(x = "Years",
y = "Fecundity (fs0)",
color = "Model")+
theme(
axis.title.x = element_text(size = 14),  # Taille du titre axe X
axis.title.y = element_text(size = 14),  # Taille du titre axe Y
axis.text.x = element_text(size = 12),   # Taille des graduations axe X
axis.text.y = element_text(size = 12)    # Taille des graduations axe Y
)
lht %>%
ggplot(aes(x=years))+
geom_line(aes(y=s2,color=as.factor(Model)),show.legend = FALSE)+
scale_color_manual(values = c("IPM" = "red", "MPM" = "black"))+
theme_bw()+
labs(x = "Years",
y = "Rosette survival (s2)",
color = "Model")+
theme(
axis.title.x = element_text(size = 14),  # Taille du titre axe X
axis.title.y = element_text(size = 14),  # Taille du titre axe Y
axis.text.x = element_text(size = 12),   # Taille des graduations axe X
axis.text.y = element_text(size = 12)    # Taille des graduations axe Y
)
lht %>%
ggplot(aes(x=years))+
geom_line(aes(y=a2,color=as.factor(Model)),show.legend = FALSE)+
scale_color_manual(values = c("IPM" = "red", "MPM" = "black"))+
theme_bw()+
labs(x = "Years",
y = "Rosette flowering (a2)",
color = "Model")+
theme(
axis.title.x = element_text(size = 14),  # Taille du titre axe X
axis.title.y = element_text(size = 14),  # Taille du titre axe Y
axis.text.x = element_text(size = 12),   # Taille des graduations axe X
axis.text.y = element_text(size = 12)    # Taille des graduations axe Y
)
load("IPMKernal_AIC")
MatrixIPM <- IPMKernal_AIC
print(lambda(MatrixIPM))
M1 <- MatrixIPM[51:100,1:50]
M2 <- MatrixIPM[101:150,51:100]
M3 <- MatrixIPM[151:200,101:150]
M8 <- MatrixIPM[351:400,301:350]
eps <- 1e-4
for (i in 1:50){
for (j in 1:50){
if(M1[i,j]<eps){M1[i,j] <- 0}
if(M2[i,j]<eps){M2[i,j] <- 0}
if(M3[i,j]<eps){M3[i,j] <- 0}
if(M8[i,j]<eps){M8[i,j] <- 0}
}
}
image2(MatrixIPM,cex=0.1)
image2(M2,cex=0.3)
image2(M3,cex=0.3)
image2(M8,cex=0.3)
sous_mat <- function(Matrix, n_subclass, class_row, class_col){
n_size <- dim(Matrix)[1]/n_subclass
row <- ((class_row-1)*n_size+1):(class_row*n_size)
col <- ((class_col-1)*n_size+1):(class_col*n_size)
sm <- Matrix[row,col]
return(sm)
}
image2(sous_mat(K,8,4,3),cex=0.1)
library(IPMpack)
library(viridis)
# Paramètres
n_size <- 50
n_age <- 8
# Plages de tailles
size_range_age1 <- seq(0.5, 15, length.out = n_size)
size_range_other <- seq(0.5, 25, length.out = n_size)
# Chargement de la matrice de sensibilité
K <- MatrixIPM
K.sens <- IPMpack::sens(K)
K.elas <- IPMpack::elas(K)
# Extraire les sous-matrices de sensibilité pour chaque âge
elasticity_list <- list()
for (a in 2:(n_age-1)) {
# idx <- ((a - 1) * n_size + 1):(a * n_size)
# submat <- elasticity_mat[idx, idx]
submat <- sous_mat(K.elas,n_age,a,a)
# submat <- submat / max(submat)  # Normaliser chaque bloc
elasticity_list[[a]] <- submat
}
elasticity_list[[1]] <- sous_mat(K.elas,n_age,1,2)
elasticity_list[[8]] <- sous_mat(K.elas,n_age,8,8)
image(size_vector,size_vector,t(K.elas))
image(size_vector,size_vector,t(K.elas))
eps <- 1e-6
for (i in 1:400){
for (j in 1:400){
if(K.elas[i,j]<eps){K.elas[i,j] <- 0}
}
}
image2(K.elas,cex=0.01)
library(IPMpack)
library(viridis)
# Paramètres
n_size <- 50
n_age <- 8
# Plages de tailles
size_range_age1 <- seq(0.5, 15, length.out = n_size)
size_range_other <- seq(0.5, 25, length.out = n_size)
# Chargement de la matrice de sensibilité
K <- MatrixIPM
K.sens <- IPMpack::sens(K)
K.elas <- IPMpack::elas(K)
eps <- 1e-6
for (i in 1:400){
for (j in 1:400){
if(K.elas[i,j]<eps){K.elas[i,j] <- 0}
}
}
image2(K.elas,cex=0.01)
filled.contour(
x = size_vector,
y = size_vector,
z = t(K.elas),
col = gray.colors(100,start=1,end=0),
plot.title = title(main = "Matrice complète de elasticité",
xlab = "Taille à t (z)",
ylab = "Taille à t+1 (z')"),
key.title = title("Elasticité"),
plot.axes = {
axis(1); axis(2)
contour(size_vector, size_vector, t(K.elas), add = TRUE)
}
)
color_palette <- rev(heat.colors(100))
# Layout à 2 colonnes : image à gauche, légende à droite
layout(matrix(c(1, 2), nrow = 1), widths = c(4, 1))
## --- 1. Image principale avec image2() ---
par(mar = c(4, 4, 2, 1))  # marges normales à gauche
image2(K.elas, col = color_palette, cex = 0.01)
## --- 2. Barre de légende manuelle ---
par(mar = c(4, 2, 2, 4))  # marges pour la colonne légende
image(
x = 1,
y = seq(0, 1, length.out = 100),
z = t(matrix(1:100, ncol = 1)),  # transpose pour verticalité
col = color_palette,
axes = FALSE,
xlab = "",
ylab = ""
)
# Axe des valeurs à droite
axis(
side = 4,
at = seq(0, 1, length.out = 5),
labels = round(seq(0, max(K.elas, na.rm = TRUE), length.out = 5), 3),
las = 1
)
mtext("Elasticity", side = 4, line = 2.5)
library(IPMpack)
library(viridis)
# Paramètres
n_size <- 50
n_age <- 8
K.sens <- IPMpack::sens(MatrixIPM)
K.elas <- IPMpack::elas(MatrixIPM)
eps <- 1e-6
for (i in 1:400){
for (j in 1:400){
if(K.elas[i,j]<eps){K.elas[i,j] <- 0}
}
}
color_palette <- rev(heat.colors(100))
# Layout à 2 colonnes : image à gauche, légende à droite
layout(matrix(c(1, 2), nrow = 1), widths = c(4, 1))
## --- 1. Image principale avec image2() ---
par(mar = c(4, 4, 2, 1))  # marges normales à gauche
image2(K.elas, col = color_palette, cex = 0.01)
## --- 2. Barre de légende manuelle ---
par(mar = c(4, 2, 2, 4))  # marges pour la colonne légende
image(
x = 1,
y = seq(0, 1, length.out = 100),
z = t(matrix(1:100, ncol = 1)),  # transpose pour verticalité
col = color_palette,
axes = FALSE,
xlab = "",
ylab = ""
)
color_palette <- rev(heat.colors(100))
# Layout à 2 colonnes : image à gauche, légende à droite
layout(matrix(c(1, 2), nrow = 1), widths = c(4, 1))
## M
par(mar = c(4, 4, 2, 1))  # marges normales à gauche
image2(K.elas, col = color_palette, cex = 0.01)
## --- 2. Barre de légende manuelle ---
par(mar = c(4, 2, 2, 4))  # marges pour la colonne légende
image(
x = 1,
y = seq(0, 1, length.out = 100),
z = t(matrix(1:100, ncol = 1)),  # transpose pour verticalité
col = color_palette,
axes = FALSE,
xlab = "",
ylab = ""
)
color_palette <- rev(heat.colors(100))
# Layout à 2 colonnes : image à gauche, légende à droite
layout(matrix(c(1, 2), nrow = 1), widths = c(4, 1))
## M
par(mar = c(4, 4, 2, 1))  # marges normales à gauche
image2(K.elas, col = color_palette, cex = 0.01)
## --- 2. Barre de légende manuelle ---
par(mar = c(4, 2, 2, 4))  # marges pour la colonne légende
image(
x = 1,
y = seq(0, 1, length.out = 100),
z = t(matrix(1:100, ncol = 1)),  # transpose pour verticalité
col = color_palette,
axes = FALSE,
xlab = "",
ylab = ""
)
# Axe des valeurs à droite
axis(
side = 4,
at = seq(0, 1, length.out = 5),
labels = round(seq(0, max(K.elas, na.rm = TRUE), length.out = 5), 3),
las = 1
)
mtext("Elasticity", side = 4, line = 2.5)
AA %>%
ggplot()+
geom_col(data=hist_data,aes(x = x, y = prob), fill = "steelblue", color = "black", width = h) +
geom_line(aes(x=Size,y=density),col="red")+
# geom_smooth(aes(x=Size,y=density))+
theme_bw()+
facet_wrap(~age,scale="free")+
labs(x="Size",
y="Density")
n.size <- 50
minsize <-  0.5
maxsize <-  25
maxsize1 <- 15
h <-  (maxsize - minsize) / n.size
h1 <-  (maxsize1 - minsize) / n.size
b <- minsize + c(0:n.size) * h
b1 <- minsize + c(0:n.size) * h1
ymid.a = 0.5 * (b[1:n.size] + b[2:(n.size + 1)])
ymid.1 = 0.5 * (b[1:n.size] + b[2:(n.size + 1)])
hist_data_list <- list()
# Boucle sur les âges
for (a in 1:8) {
data_age <- centauree_data %>% filter(Age == a)
if (a == 1) {
bins <- b1
mids <- ymid.1
} else {
bins <- b
mids <- ymid.a
}
hist_counts <- hist(data_age$Size0Mars, breaks = bins, plot = FALSE)
df_hist <- data.frame(
Age = a,
x = mids,
count = hist_counts$counts
)
hist_data_list[[a]] <- df_hist
}
# Combine tout
hist_data <- bind_rows(hist_data_list)
# Normalisation
N_total <- sum(hist_data$count)
hist_data <- hist_data %>%
mutate(prob = count / N_total,
age=Age)
AA %>%
ggplot()+
geom_col(data=hist_data,aes(x = x, y = prob), fill = "steelblue", color = "black", width = h) +
geom_line(aes(x=Size,y=density),col="red")+
# geom_smooth(aes(x=Size,y=density))+
theme_bw()+
facet_wrap(~age,scale="free")+
labs(x="Size",
y="Density")
A <- eigen.analysis(MatrixIPM)
A$lambda1
minsize <-  0.5
maxsize <-  25
maxsize1 <- 15
h <-  (maxsize - minsize) / n.size
h1 <-  (maxsize1 - minsize) / n.size
b <- minsize + c(0:n.size) * h
b1 <- minsize + c(0:n.size) * h1
x <- 0.5 * (b[1:n.size] + b[2:(n.size + 1)])
x1 <- 0.5 * (b1[1:n.size] + b1[2:(n.size + 1)])
AA <- tibble(
Size1 = rep(x1,8),
Size = rep(x,8),
density = rep(NA,50*8),
age = rep(NA,50*8)
)
A <- eigen.analysis(MatrixIPM)
AA <- tibble(
Size1 = rep(x1,8),
Size = rep(x,8),
density = rep(NA,50*8),
age = rep(NA,50*8)
)
n.size <- 50
minsize <-  0.5
maxsize <-  25
maxsize1 <- 15
h <-  (maxsize - minsize) / n.size
h1 <-  (maxsize1 - minsize) / n.size
b <- minsize + c(0:n.size) * h
b1 <- minsize + c(0:n.size) * h1
ymid.a = 0.5 * (b[1:n.size] + b[2:(n.size + 1)])
ymid.1 = 0.5 * (b[1:n.size] + b[2:(n.size + 1)])
hist_data_list <- list()
# Boucle sur les âges
for (a in 1:8) {
data_age <- centauree_data %>% filter(Age == a)
if (a == 1) {
bins <- b1
mids <- ymid.1
} else {
bins <- b
mids <- ymid.a
}
hist_counts <- hist(data_age$Size0Mars, breaks = bins, plot = FALSE)
df_hist <- data.frame(
Age = a,
x = mids,
count = hist_counts$counts
)
hist_data_list[[a]] <- df_hist
}
# Combine tout
hist_data <- bind_rows(hist_data_list)
# Normalisation
N_total <- sum(hist_data$count)
hist_data <- hist_data %>%
mutate(prob = count / N_total,
age=Age)
AA %>%
ggplot()+
geom_col(data=hist_data,aes(x = x, y = prob), fill = "steelblue", color = "black", width = h) +
geom_line(aes(x=Size,y=density),col="red")+
# geom_smooth(aes(x=Size,y=density))+
theme_bw()+
facet_wrap(~age,scale="free")+
labs(x="Size",
y="Density")
AA %>%
ggplot()+
geom_col(data=hist_data,aes(x = x, y = prob), fill = "steelblue", color = "black", width = h) +
geom_line(aes(x=Size,y=density),col="red")+
# geom_smooth(aes(x=Size,y=density))+
theme_bw()+
facet_wrap(~age,scale="free")+
labs(x="Size",
y="Density")
A <- eigen.analysis(MatrixIPM)
minsize <-  0.5
maxsize <-  25
maxsize1 <- 15
h <-  (maxsize - minsize) / n.size
h1 <-  (maxsize1 - minsize) / n.size
b <- minsize + c(0:n.size) * h
b1 <- minsize + c(0:n.size) * h1
x <- 0.5 * (b[1:n.size] + b[2:(n.size + 1)])
x1 <- 0.5 * (b1[1:n.size] + b1[2:(n.size + 1)])
AA <- tibble(
Size1 = rep(x1,8),
Size = rep(x,8),
density = rep(NA,50*8),
age = rep(NA,50*8)
)
n.size <- 50
minsize <-  0.5
maxsize <-  25
maxsize1 <- 15
h <-  (maxsize - minsize) / n.size
h1 <-  (maxsize1 - minsize) / n.size
b <- minsize + c(0:n.size) * h
b1 <- minsize + c(0:n.size) * h1
ymid.a = 0.5 * (b[1:n.size] + b[2:(n.size + 1)])
ymid.1 = 0.5 * (b[1:n.size] + b[2:(n.size + 1)])
hist_data_list <- list()
# Boucle sur les âges
for (a in 1:8) {
data_age <- centauree_data %>% filter(Age == a)
if (a == 1) {
bins <- b1
mids <- ymid.1
} else {
bins <- b
mids <- ymid.a
}
hist_counts <- hist(data_age$Size0Mars, breaks = bins, plot = FALSE)
df_hist <- data.frame(
Age = a,
x = mids,
count = hist_counts$counts
)
hist_data_list[[a]] <- df_hist
}
# Combine tout
hist_data <- bind_rows(hist_data_list)
# Normalisation
N_total <- sum(hist_data$count)
hist_data <- hist_data %>%
mutate(prob = count / N_total,
age=Age)
AA %>%
ggplot()+
geom_col(data=hist_data,aes(x = x, y = prob), fill = "steelblue", color = "black", width = h) +
geom_line(aes(x=Size,y=density),col="red")+
# geom_smooth(aes(x=Size,y=density))+
theme_bw()+
facet_wrap(~age,scale="free")+
labs(x="Size",
y="Density")
for (i in 1:8){
AA$density[(50*(i-1)+1):(50*i)] <- A$stable.stage[(50*(i-1)+1):(50*i)]
AA$age[(50*(i-1)+1):(50*i)]  <- rep(i,50)
}
n.size <- 50
minsize <-  0.5
maxsize <-  25
maxsize1 <- 15
h <-  (maxsize - minsize) / n.size
h1 <-  (maxsize1 - minsize) / n.size
b <- minsize + c(0:n.size) * h
b1 <- minsize + c(0:n.size) * h1
ymid.a = 0.5 * (b[1:n.size] + b[2:(n.size + 1)])
ymid.1 = 0.5 * (b[1:n.size] + b[2:(n.size + 1)])
hist_data_list <- list()
# Boucle sur les âges
for (a in 1:8) {
data_age <- centauree_data %>% filter(Age == a)
if (a == 1) {
bins <- b1
mids <- ymid.1
} else {
bins <- b
mids <- ymid.a
}
hist_counts <- hist(data_age$Size0Mars, breaks = bins, plot = FALSE)
df_hist <- data.frame(
Age = a,
x = mids,
count = hist_counts$counts
)
hist_data_list[[a]] <- df_hist
}
# Combine tout
hist_data <- bind_rows(hist_data_list)
# Normalisation
N_total <- sum(hist_data$count)
hist_data <- hist_data %>%
mutate(prob = count / N_total,
age=Age)
AA %>%
ggplot()+
geom_col(data=hist_data,aes(x = x, y = prob), fill = "steelblue", color = "black", width = h) +
geom_line(aes(x=Size,y=density),col="red")+
# geom_smooth(aes(x=Size,y=density))+
theme_bw()+
facet_wrap(~age,scale="free")+
labs(x="Size",
y="Density")
gc()
