centauree_data$age0[centauree_data$age0 > 8] <- 8
spaMM.options(separation_max=70)
annees <- 1995:2022
populations <- c("Po","Au","Pe","E1","E2","Cr")
taille_range <- seq(0.5, 25, by = 0.5)
age_range <- 1:8
fake_data <- expand.grid(
year = annees,
Pop = populations,
Size0Mars = taille_range,
age0 = age_range
)
fake_data <- fake_data %>%
mutate(Nrw = row_number())
survdata <- centauree_data[centauree_data$Flowering0!=1,]
# survdata$SurvieMars[survdata$age0==7][1:15] <- 0
survdata %>%
group_by(Size0Mars) %>%
mutate(survivalProba = sum(SurvieMars, na.rm = TRUE) / n()) %>%
ggplot(aes(x = Size0Mars, y = SurvieMars)) +
geom_count(alpha = 0.6) +  # Points dimensionnés selon la fréquence
geom_point(aes(y = survivalProba), color = "red", size = 0.5) +
geom_line(aes(y = survivalProba), color = "red") +
labs(title = "Relation entre la taille et la survie",
x = "Taille",
y = "Survie") +
ylim(0, 1) +
theme_minimal()
survdata %>%
group_by(age0) %>%
mutate(survivalProba = sum(SurvieMars, na.rm = TRUE) / n()) %>%
ggplot(aes(x = age0, y = SurvieMars)) +
geom_count(alpha = 0.6) +  # Points dimensionnés selon la fréquence
geom_point(aes(x = age0, y = survivalProba), color = "red", size = 1) +
geom_line(aes(x = age0, y = survivalProba), color = "red") +
labs(title = "Relation entre l'age et la survie",
x = "age",
y = "Survie") +
ylim(0, 1) +
theme_minimal()
Survglm1 <- fitme(SurvieMars ~ 1+ bs(Size0Mars,df=5,degree=3) + bs(age0,degree=3,knots = 6.5)+ (Size0Mars|year) + (age0|Pop) ,
family=binomial,
data=survdata,
method="PQL/L")
# Survglm12 <- fitme(SurvieMars ~ 1+ bs(Size0Mars,df=5,degree=3) + bs(age0,degree=3,knots = 4.5)+ (Size0Mars|year) + (age0|Pop) ,
#                  family=binomial,
#                  data=survdata,
#                  method="PQL/L")
Survglm2 <- fitme(SurvieMars ~ 1 + bs(Size0Mars,df=5,degree=3) + bs(age0,degree=3,knots = 6.5)
+ (Size0Mars + age0|year) + (age0|Pop) ,
family=binomial,
data=survdata,
method="PQL/L")
Survglm3 <- fitme(SurvieMars ~ 1 + bs(Size0Mars,df=5,degree=3) + bs(age0,degree=3,knots = c(1.5,6.5)) + (Size0Mars|year) + (age0|Pop) ,
family=binomial,
data=survdata,
method="PQL/L")
Survglm4 <- fitme(SurvieMars ~ 1 + bs(Size0Mars,df=5,degree=3) + bs(age0,degree=3,knots = c(1.5,6.5))
+ (Size0Mars + age0|year) + (age0|Pop) ,
family=binomial,
data=survdata,
method="PQL/L")
Survglm5 <- fitme(SurvieMars ~ 1 + bs(Size0Mars,df=5,degree=3) + bs(age0,degree=3,knots = 6.5)
+ (Size0Mars|year) + (Size0Mars + age0|Pop) ,
family=binomial,
data=survdata,
method="PQL/L")
save(Survglm1, file="Survglm1")
save(Survglm2, file="Survglm2")
save(Survglm3, file="Survglm3")
save(Survglm4, file="Survglm4")
save(Survglm5, file="Survglm5")
DoF(Survglm1)
Survglm1
extractAIC(Survglm1)
extractBIC(Survglm1)
?BIC
BIC(Survglm1)
extractBIC(Survglm1)[2]
extractBIC(Survglm1)[,2]
extractBIC(Survglm1)[2,]
extractAIC(Survglm1)[2]
typeof(extractAIC(Survglm1)[2])
extractAIC(Survglm1)[2]-2*DoF(Survglm1)
extractAIC(Survglm1)[2]+(log()-2)*DoF(Survglm1)
extractAIC(Survglm1)[2]+(log(7635)-2)*DoF(Survglm1)
extractAIC(Survglm1)[2]
extractBIC <- function(fit, n){
extractAIC(fit)[2]+(log(n)-2)*DoF(fit)
}
extractBIC(Survglm1,7635)
extractBIC <- function(fit, n){
extractAIC(fit)[2]+(log(n)-2)*DoF(fit)[3]
}
extractBIC(Survglm1,7635)
typeof(extractBIC(Survglm1,7635))
extractAIC(fit)+(log(n)-2)*DoF(fit)[3]
extractBIC <- function(fit, n){
extractAIC(fit)+(log(n)-2)*DoF(fit)[3]
}
extractBIC(Survglm1,7635)
extractAIC(Survglm1)[[2]]
extractBIC <- function(fit, n){
extractAIC(fit)[[2]]+(log(n)-2)*DoF(fit)[3]
}
extractBIC(Survglm1,7635)
extractBIC <- function(fit, n){
extractAIC(fit)[[2]]+(log(n)-2)*DoF(fit)[[3]]
}
extractBIC(Survglm1,7635)
extractAIC(Survglm1) ; extractBIC(Survglm1)
extractAIC(Survglm1) ; extractBIC(Survglm1)
length(centauree_data)
length(centauree_data$Nrw[!is.na(centauree_data),])
length(centauree_data$Nrw[!is.na(centauree_data)])
View(centauree_data)
length(centauree_data$Nrw)
n <- length(centauree_data$Nrw)
extractAIC(Survglm1) ; extractBIC(Survglm1, n)
extractAIC(Survglm2) ; extractBIC(Survglm2, n)
extractAIC(Survglm3) ; extractBIC(Survglm3, n)
extractAIC(Survglm4) ; extractBIC(Survglm4, n)
extractAIC(Survglm5) ; extractBIC(Survglm5, n)
cptldata <- centauree_data[!is.na(centauree_data$Cptl0),]
cptldata <- cptldata[!cptldata$Flowering0==0,]
# Nombre de capitules moyen / age
capidata <- cptldata %>%
group_by(age0) %>%
mutate(meancptl=mean(Cptl0))
capidata%>%
ggplot(aes(x = age0, y = meancptl)) +
geom_point(color = "red", size = 2) +
geom_count(aes(y=Cptl0), alpha=0.6) +
labs(title = "Relation entre l'age et le nombre de capitules",
x = "Age",
y = "Nombre de capitules") +
theme_minimal()
# Nombre de capitule / taille
cptldata %>%
ggplot(aes(x=Size0Mars,y=Cptl0))+
geom_point() +
labs(title = "Relation entre la taille et le nombre de capitules",
x = "taille",
y = "Nombre de capitules") +
theme_minimal()
# Nombre de capitule / année
cptldata %>%
ggplot(aes(x=year,y=Cptl0))+
geom_point() +
labs(title = "Relation entre l'année et le nombre de capitules",
x = "année",
y = "Nombre de capitules") +
theme_minimal()
Cptlglm1 <- fitme(Cptl0 ~ 1 + Size0Mars,
data=cptldata)
Cptlglm12 <- fitme(Cptl0 ~ 1 + Size0Mars,
data=cptldata, resid.model = ~log(Size0Mars))
Cptlglm2 <- fitme(Cptl0 ~ 1 + poly(Size0Mars,2),
data=cptldata)
Cptlglm3 <- fitme(Cptl0 ~ 1 + poly(Size0Mars,3),
data=cptldata)
Cptlglm4 <- fitme(Cptl0 ~ 1 + Size0Mars +(1|year),
data=cptldata)
Cptlglm5 <- fitme(Cptl0 ~ 1 + Size0Mars + age0,
data=cptldata)
n <- length(cptl_data$Nrw)
n <- length(cptldata$Nrw)
extractAIC(Survglm1) ; extractBIC(Survglm1, n)
extractAIC(Survglm2) ; extractBIC(Survglm2, n)
extractAIC(Survglm3) ; extractBIC(Survglm3, n)
extractAIC(Survglm4) ; extractBIC(Survglm4, n)
extractAIC(Survglm5) ; extractBIC(Survglm5, n)
n <- length(cptldata$Nrw)
extractAIC(Cptlglm1) ; extractBIC(Cptlglm1, n)
extractAIC(Cptlglm2) ; extractBIC(Cptlglm2, n)
extractAIC(Cptlglm3) ; extractBIC(Cptlglm3, n)
extractAIC(Cptlglm4) ; extractBIC(Cptlglm4, n)
extractAIC(Cptlglm5) ; extractBIC(Cptlglm5, n)
plantule_data <- centauree_data_complet[centauree_data_complet$age0==1,]
# Taille des plantules / année
plantule_data %>%
ggplot(aes(x = year, y = Size0Mars)) +
geom_count(alpha=0.6) +
labs(x = "Année",
y = "Taille des plantules") +
theme_minimal()
# Taille des plantules / population
plantule_data %>%
ggplot(aes(x = Pop, y = Size0Mars)) +
geom_count(alpha=0.6) +
labs(x = "Population",
y = "Taille des plantules") +
theme_minimal()
Pltglm1 <- fitme(Size0Mars ~ 1 + (1|year) + (1|Pop) + (1|Pop:year),
data=plantule_data,
family = Gamma(log))
Pltglm2 <- fitme(Size0Mars ~ 1 + (1|Pop) + (1|Pop:year),
data=plantule_data,
family = Gamma(log))
Pltglm3 <- fitme(Size0Mars ~ 1 + (1|Pop:year),
data=plantule_data,
family = Gamma(log))
Pltglm4 <- fitme(Size0Mars ~ 1 + (1|year) + (1|Pop:year),
data=plantule_data,
family = Gamma(log))
Pltglm5 <- fitme(Size0Mars ~ 1 + (1|year) + (1|Pop),
data=plantule_data,
family = Gamma(log))
n <- length(plantule_data$Nrw)
extractAIC(Pltglm1) ; extractBIC(Pltglm1, n)
extractAIC(Pltglm2) ; extractBIC(Pltglm2, n)
extractAIC(Pltglm3) ; extractBIC(Pltglm3, n)
extractAIC(Pltglm4) ; extractBIC(Pltglm4, n)
extractAIC(Pltglm5) ; extractBIC(Pltglm5, n)
cptl_data <- centauree_data_complet[!centauree_data_complet$Flowering0==0,]
Cptlglm1 <- fitme(Cptl0 ~ 1 + Size0Mars,
data=cptl_data)
# NbrCptl = -3.769 + 2.683*Size0Mars
cptl_data_predi <- cptl_data %>%
mutate(Cptl0 = ifelse(is.na(Cptl0), round(-3.769+2.683*Size0Mars), Cptl0))
plt <- centauree_data_complet %>%
filter(age0 == 1) %>%
group_by(Quadrat, year, Pop) %>%
summarize(NombrePlantules = sum(age0))
cptl <- cptl_data_predi %>%
group_by(Quadrat, year, Pop) %>%
summarize(NombresCapitules = sum(Cptl0))
Estb <- inner_join(plt, cptl, by = join_by(Quadrat, year, Pop)) %>%
mutate(EstbRate = rep(NA)) %>%
arrange(Quadrat)
summary(Estb)
for (i in 2:length(Estb$Quadrat)) {
if (Estb$Quadrat[i] != Estb$Quadrat[i-1]) {next}
if (Estb$year[i] != Estb$year[i-1] + 1) {next}
Estb$EstbRate[i] <- Estb$NombrePlantules[i] / Estb$NombresCapitules[i-1]
}
Estbglm1 <- fitme(EstbRate ~ 1 + (1|year), data=Estb)
Estbglm2 <- fitme(EstbRate ~ 1, data=Estb)
Estbglm3 <- fitme(EstbRate ~ 1 + (1|year) + (1|Pop), data=Estb)
Estbglm4 <- fitme(EstbRate ~ 1 + (1|year) + (1|Pop:year), data=Estb)
Estbglm5 <- fitme(EstbRate ~ 1 + (1|Pop), data=Estb)
Estbglm1
Estbglm2
Estbglm3
Estbglm4
Estbglm5
n <- length(Estb$Nrw)
extractAIC(Estbglm1) ; extractBIC(Estbglm1, n)
extractAIC(Estbglm2) ; extractBIC(Estbglm2, n)
extractAIC(Estbglm3) ; extractBIC(Estbglm3, n)
extractAIC(Estbglm4) ; extractBIC(Estbglm4, n)
extractAIC(Estbglm5) ; extractBIC(Estbglm5, n)
length(Estb)
length(Estb$Quadrat)
n <- length(Estb$Quadrat)
extractAIC(Estbglm1) ; extractBIC(Estbglm1, n)
extractAIC(Estbglm2) ; extractBIC(Estbglm2, n)
extractAIC(Estbglm3) ; extractBIC(Estbglm3, n)
extractAIC(Estbglm4) ; extractBIC(Estbglm4, n)
extractAIC(Estbglm5) ; extractBIC(Estbglm5, n)
n <- length(Estb$Quadrat)
extractAIC(Estbglm1) ; extractBIC(Estbglm1, n)
extractAIC(Estbglm2) ; extractBIC(Estbglm2, n)
extractAIC(Estbglm3) ; extractBIC(Estbglm3, n)
extractAIC(Estbglm4) ; extractBIC(Estbglm4, n)
extractAIC(Estbglm5) ; extractBIC(Estbglm5, n)
growthdata <- centauree_data[!is.na(centauree_data$Size1Mars), ]
growthdata <- growthdata[growthdata$Size1Mars != 0, ]
growthdata %>%
ggplot(aes(y = Size1Mars, x = Size0Mars)) +
geom_count(alpha=0.5) +
labs(title = "Relation entre le taux de croissance et la taille",
y = "Taux de croissance",
x = "Taille") +
theme_minimal()
Growthglm1 <- fitme(growthrate ~ 1 + bs(Size0Mars,df =5,degree=3) + bs(age0,df=3,degree=3) + (Size0Mars + age0|year) + (Size0Mars|Pop),
data=growthdata,
resid.model = ~ 1)
growthdata <- centauree_data[!is.na(centauree_data$Size1Mars), ]
growthdata <- growthdata[growthdata$Size1Mars != 0, ]
growthdata <- growthdata %>%
mutate(growthrate=Size1Mars/Size0Mars)
growthdata %>%
ggplot(aes(y = Size1Mars, x = Size0Mars)) +
geom_count(alpha=0.5) +
labs(title = "Relation entre le taux de croissance et la taille",
y = "Taux de croissance",
x = "Taille") +
theme_minimal()
Growthglm1 <- fitme(growthrate ~ 1 + bs(Size0Mars,df =5,degree=3) + bs(age0,df=3,degree=3) + (Size0Mars + age0|year) + (Size0Mars|Pop),
data=growthdata,
resid.model = ~ 1)
Growthglm2 <- fitme(growthrate ~ 1 + bs(Size0Mars,df =5,degree=3) + bs(age0,df=3,degree=3) + (Size0Mars + age0|year) + (Size0Mars|Pop),
data=growthdata,
resid.model = ~ log(Size0Mars) + log(age0))
Growthglm3 <- fitme(growthrate ~ 1 + bs(Size0Mars,df =5,degree=3) + bs(age0,degree=3,knots=6.5) + (Size0Mars + age0|year) + (Size0Mars|Pop),
data=growthdata,
resid.model = ~ 1)
Growthglm4 <- fitme(growthrate ~ 1 + bs(Size0Mars,df =5,degree=3) + bs(age0,degree=3,df=3) + (Size0Mars + age0|year) + (Size0Mars + age0|Pop),
data=growthdata,
resid.model = ~ 1)
Growthglm5 <- fitme(growthrate ~ 1 + bs(Size0Mars,df =5,degree=3) + bs(age0,degree=3,knots=6.5) + (Size0Mars + age0|year) + (Size0Mars|Pop),
data=growthdata,
resid.model = ~ log(Size0Mars) + log(age0))
n <- length(growthdata$Nrw)
extractAIC(Growthglm1) ; extractBIC(Growthglm1, n)
extractAIC(Growthglm2) ; extractBIC(Growthglm2, n)
extractAIC(Growthglm3) ; extractBIC(Growthglm3, n)
extractAIC(Growthglm4) ; extractBIC(Growthglm4, n)
extractAIC(Growthglm5) ; extractBIC(Growthglm5, n)
rm(list=ls())
library(knitr)
library(spaMM)
library(tidyverse)
library(splines)
library(foreach)
library(doParallel)
setwd("/media/loic/Commun/0Travail/Stage 2025 ISEM/Models")
centauree_data <- read.csv("donnesIPM_short.csv")
centauree_data_complet <- read.csv("donnesIPM.csv")
#Supprimer plantes dont l'age est inconnu
centauree_data <- centauree_data[!is.na(centauree_data$age0), ]
centauree_data$age1 <- ifelse(centauree_data$Stage1=="V",centauree_data$age0+1,NA)
#Forcer l'age maximal à 8
length(centauree_data$age0[centauree_data$age0 >= 8])
centauree_data$age0[centauree_data$age0 > 8] <- 8
spaMM.options(separation_max=70)
# Liste initiale des effets aléatoires
random_effects <- c("year", "Pop", "Nrw", "1", "Size0Mars", "age0", "Size0Mars + age0")
# Les parties pour combiner
r_effects <- random_effects[1:3]  # éléments : "year", "Pop", "Nrw"
f_effects <- random_effects[4:7]   # éléments "1", "Size0Mars", "age0", "Size0Mars + age0"
# Générer toutes les combinaisons (fixed effects | random effect)
ran_combinations <- sapply(f_effects, function(feffect) {
sapply(r_effects, function(reffect) {
paste0("(", feffect, "|", reffect, ")")
})
})
random_effects <- c(as.vector(ran_combinations),"(1|Pop:year)","1")
# size_effects <- c("Size0Mars","bs(Size0Mars,df=2,degree=2)","bs(Size0Mars,df=3,degree=2)","bs(Size0Mars,df=4,degree=2)",
#                    "bs(Size0Mars,df=3,degree=3)","bs(Size0Mars,df=4,degree=3)","bs(Size0Mars,df=5,degree=3)")
size_effects <- c("Size0Mars","bs(Size0Mars,df=2,degree=2)","bs(Size0Mars,df=4,degree=2)",
"bs(Size0Mars,df=3,degree=3)","bs(Size0Mars,df=5,degree=3)")
age_effects <- c("age0","bs(age0,df=2,degree=2)","bs(age0,degree=2,knots=6.5)",
"bs(age0,df=3,degree=3)","bs(age0,degree=3,knots=6.5)","bs(age0,degree=3,knots=c(1.5,6.5))")
# Fonction pour vérifier les contraintes
is_valid_combination <- function(comb) {
comb <- sort(comb)  # Trier pour vérifier l'ordre
if ("(1|year)" %in% comb && "(Size0Mars + age0|year)" %in% comb) return(FALSE)
if ("(1|year)" %in% comb && "(age0|year)" %in% comb) return(FALSE)
if ("(1|year)" %in% comb && "(Size0Mars|year)" %in% comb) return(FALSE)
if ("(Size0Mars|year)" %in% comb && "(Size0Mars + age0|year)" %in% comb) return(FALSE)
if ("(Size0Mars|year)" %in% comb && "(age0|year)" %in% comb) return(FALSE)
if ("(age0|year)" %in% comb && "(Size0Mars + age0|year)" %in% comb) return(FALSE)
if ("(1|Pop)" %in% comb && "(Size0Mars + age0|Pop)" %in% comb) return(FALSE)
if ("(1|Pop)" %in% comb && "(age0|Pop)" %in% comb) return(FALSE)
if ("(1|Pop)" %in% comb && "(Size0Mars|Pop)" %in% comb) return(FALSE)
if ("(Size0Mars|Pop)" %in% comb && "(Size0Mars + age0|Pop)" %in% comb) return(FALSE)
if ("(Size0Mars|Pop)" %in% comb && "(age0|Pop)" %in% comb) return(FALSE)
if ("(age0|Pop)" %in% comb && "(Size0Mars + age0|Pop)" %in% comb) return(FALSE)
if ("(1|Nrw)" %in% comb && "(Size0Mars + age0|Nrw)" %in% comb) return(FALSE)
if ("(1|Nrw)" %in% comb && "(age0|Nrw)" %in% comb) return(FALSE)
if ("(1|Nrw)" %in% comb && "(Size0Mars|Nrw)" %in% comb) return(FALSE)
if ("(Size0Mars|Nrw)" %in% comb && "(Size0Mars + age0|Nrw)" %in% comb) return(FALSE)
if ("(Size0Mars|Nrw)" %in% comb && "(age0|Nrw)" %in% comb) return(FALSE)
if ("(age0|Nrw)" %in% comb && "(Size0Mars + age0|Nrw)" %in% comb) return(FALSE)
if (!"1" %in% comb) return(FALSE)
return(TRUE)
}
is_valid2 <- function(comb){
if ("(1|Nrw)" %in% comb) return(FALSE)
if ("(age0|Nrw)" %in% comb) return(FALSE)
if ("(Size0Mars|Nrw)" %in% comb) return(FALSE)
if ("(Size0Mars + age0|Nrw)" %in% comb) return(FALSE)
if ("(1|Pop:year)" %in% comb) return(FALSE)
return(TRUE)
}
combinations <- list()
# Combinaisons sans "bs" ni "Size0Mars" ni "age0"
for (n in 1:length(random_effects)) {
combinations <- c(combinations, combn(random_effects, n, simplify = FALSE))
}
combi <- Filter(is_valid_combination, combinations) #250 combinaisons d'effets aléatoires
combinations <- combi
# Ajouter chaque "bs" de size et age seul et avec d'autres
for (s in size_effects) {
for (combo in combi) {
combinations <- c(combinations, list(c(s, combo)))
}
}
valid_combinations <- combinations
# 1500 combinaisons en prenant l'effets taille
for (a in age_effects) {
for (combo in combinations) {
valid_combinations <- c(valid_combinations, list(c(a, combo)))
}
}
valid2 <- Filter(is_valid2,valid_combinations)
combi_plantule <- c("1","1 + (1|year) + (1|Pop) + (1|Pop:year)","1 + (1|year) + (1|Pop)","1 + (1|year) + (1|Pop:year)","1 + (1|Pop) + (1|Pop:year)","1 + (1|year)","1 + (1|Pop)","1 + (1|Pop:year)")
combi_resvar <- c("1","log(age0)","log(Size0Mars)","log(Size0Mars) + log(age0)")
combi_growth <- lapply(valid2, function(x) gsub("Size0Mars", "log(Size0Mars)", x))
# Survglm <- fitme(SurvieMars ~ 1 + bs(Size0Mars,df=5,degree=3) + bs(age0,degree=3,knots = 6.5)
# + (Size0Mars + age0|year) + (Size0Mars + age0|Pop) ,
#                  family=binomial,
#                  data=centauree_data,
#                  verbose=c(TRACE=TRUE), method="PQL/L")
#
# Flowglm <- fitme(Flowering0 ~  1 + bs(Size0Mars,df=5) + poly(age0,3) + (Size0Mars + age0|year) + (Size0Mars + age0|Pop),
#                  family=binomial,
#                  data=centauree_data, method="PQL/L")
#
#
# growthdata <- centauree_data[!is.na(centauree_data$Size1Mars),]
# growthdata <- growthdata[growthdata$Size1Mars!=0,]
#
# Growthglm <- fitme(Size1Mars ~ 1 + bs(log(Size0Mars),df=5) +  bs(age0,degree=3,knots = 6.5) + (log(Size0Mars) + age0|year) + (log(Size0Mars) + age0|Pop),
#                    data=growthdata, family = gaussian(log),
#                    verbose=c(TRACE=TRUE))
#
#
# Cptlglm=fitme(Cptl0 ~ 1 + bs(Size0Mars,df=5) +  bs(age0,degree=3,knots = 6.5) + (Size0Mars + age0|year) + (Size0Mars + age0|Pop),
#               data=centauree_data,
#               verbose=c(TRACE=TRUE))
#
#
# plantuledata <- centauree_data[centauree_data$age0==1,]
# Pltglm=fitme(Size0Mars ~ 1 + (1|year) + (1|Pop) + (1|Pop:year),
#              family=Gamma(log),
#              data=plantuledata,
#              verbose=c(TRACE=TRUE))
i <- 1L
combi_fleur <- list()
for (set_effects in combi) {
effect_formula <- paste(unlist(set_effects), collapse = "+")
formula <- as.formula(paste(resp, "~", effect_formula))
if (is_separated.formula(formula, data = centauree_data, method = "PQL/L") == FALSE) {
combi_fleur[[i]] <- set_effects
i <- i + 1L
}
print(i)
}
i <- 1L
combi_fleur <- list()
for (set_effects in combi) {
effect_formula <- paste(unlist(set_effects), collapse = "+")
formula <- as.formula(paste("Flowering0", "~", effect_formula))
if (is_separated.formula(formula, data = centauree_data, method = "PQL/L") == FALSE) {
combi_fleur[[i]] <- set_effects
i <- i + 1L
}
print(i)
}
combi
i <- 1L
combi_fleur <- list()
for (set_effects in valid2) {
effect_formula <- paste(unlist(set_effects), collapse = "+")
formula <- as.formula(paste("Flowering0", "~", effect_formula))
if (is_separated.formula(formula, data = centauree_data, method = "PQL/L") == FALSE) {
combi_fleur[[i]] <- set_effects
i <- i + 1L
}
print(i)
}
mod_summaries <- list()
mod_AIC <- list()                        # Create empty list
better_mod <- matrix(nrow = 10, ncol = 5)
response <- c("SurvieMars", "Flowering0", "growthrate", "Cptl0", "Size0Mars")
resp <- "Flowering0"
i <- 0L
combi <- valid_2
combi <- valid2
if (resp %in% c("SurvieMars", "Flowering0")) {
combi <- valid2
}
combi <- combi_fleur
resp <- "SurvieMars"
combi <- valid2
resp <- "Flowering0"
combi <- combi_fleur
for (set_effects in combi) {
i <-  i + 1L
print(i)
effect_formula <- paste(unlist(set_effects), collapse = "+")
#effect_formula <- set_effects
formula <- as.formula(paste(resp, "~", effect_formula))
if (is_separated.formula(formula, data = centauree_data, method = "PQL/L") == TRUE) {next}
#fit <-  fitme(formula, family=Gamma(log),data=plantuledata)
#fit <-  fitme(formula, data = centauree_data)
fit <-  fitme(formula,
data = centauree_data,
family = binomial,
method = "PQL/L")
mod_summaries[[i]] <- summary(fit)
mod_AIC[[i]] <- extractAIC(fit)[2]
print(i)
}
resp <- "Flowering0"
ls <- length(combi_fleur)
resp <- "Flowering0"
ls <- length(combi_fleur)
cl <- makeCluster(6)
registerDoParallel(cl)
AICresult <- foreach(i=1:ls, .packages=c("splines","spaMM")) %dopar% {
set_effects <- combi_fleur[i]
effect_formula <- paste(unlist(set_effects), collapse = "+")
formula <- as.formula(paste(resp, "~", effect_formula))
fit <- fitme(formula, data = centauree_data, family=binomial, method = "PQL/L")
extractAIC(fit)[2]
}
stopCluster(cl)
stopCluster(cl)
