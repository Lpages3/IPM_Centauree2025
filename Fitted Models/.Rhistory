year = annees,
Pop = populations,
Size0Mars = taille_range,
age0 = age_range
)
fake_data <- fake_data %>%
mutate(Nrw = row_number())
annees <- 1995:2022
populations <- c("Po","Au","Pe","E1","E2","Cr")
taille_range <- seq(0.5, 25, by = 0.5)
age_range <- 1:8
fake_data <- expand.grid(
year = annees,
Pop = populations,
Size0Mars = taille_range,
age0 = age_range
)
fake_data <- fake_data %>%
mutate(Nrw = row_number())
# N the number of subjects
# ntot the total number of observations
extractBIC <- function(fit, ntot, N){
extractAIC(fit)[[2]] +(log(ntot)-2)*DoF(fit)[[3]] + log(N)*DoF(fit)[[1]]
}
centauree_data %>%
group_by(Size0Mars) %>%
mutate(floweringProba = sum(Flowering, na.rm = TRUE) / n()) %>%
ggplot(aes(x = Size0Mars, y = Flowering)) +
geom_count(alpha = 0.6) +
geom_point(aes(y = floweringProba), color = "red", size = 0.5) +
labs(title = "Relation entre la taille et la floraison",
x = "Taille",
y = "Floraison") +
ylim(0, 1) +
theme_minimal()
centauree_data %>%
group_by(age0) %>%
mutate(floweringProba = sum(Flowering, na.rm = TRUE) / n()) %>%
ggplot(aes(x = age0, y = Flowering)) +
geom_count(alpha = 0.6) +
geom_point(aes(y = floweringProba), color = "red", size = 0.5) +
geom_line(aes(y = floweringProba), color = "red") +
labs(title = "Relation entre la taille et la floraison",
x = "age",
y = "Floraison") +
ylim(0, 1) +
theme_minimal()
centauree_data %>%
group_by(Size0Mars) %>%
mutate(floweringProba = sum(Flowering, na.rm = TRUE) / n()) %>%
ggplot(aes(x = Size0Mars, y = Flowering)) +
geom_count(alpha = 0.6) +
geom_point(aes(y = floweringProba), color = "red", size = 0.5) +
labs(title = "Relation entre la taille et la floraison",
x = "Taille",
y = "Floraison") +
ylim(0, 1) +
theme_minimal()
centauree_data %>%
group_by(Age) %>%
mutate(floweringProba = sum(Flowering, na.rm = TRUE) / n()) %>%
ggplot(aes(x = age0, y = Flowering)) +
geom_count(alpha = 0.6) +
geom_point(aes(y = floweringProba), color = "red", size = 0.5) +
geom_line(aes(y = floweringProba), color = "red") +
labs(title = "Relation entre la taille et la floraison",
x = "age",
y = "Floraison") +
ylim(0, 1) +
theme_minimal()
centauree_data %>%
group_by(Size0Mars) %>%
mutate(floweringProba = sum(Flowering, na.rm = TRUE) / n()) %>%
ggplot(aes(x = Size0Mars, y = Flowering)) +
geom_count(alpha = 0.6) +
geom_point(aes(y = floweringProba), color = "red", size = 0.5) +
labs(title = "Relation entre la taille et la floraison",
x = "Taille",
y = "Floraison") +
ylim(0, 1) +
theme_minimal()
centauree_data %>%
group_by(Age) %>%
mutate(floweringProba = sum(Flowering, na.rm = TRUE) / n()) %>%
ggplot(aes(x = Age, y = Flowering)) +
geom_count(alpha = 0.6) +
geom_point(aes(y = floweringProba), color = "red", size = 0.5) +
geom_line(aes(y = floweringProba), color = "red") +
labs(title = "Relation entre la taille et la floraison",
x = "age",
y = "Floraison") +
ylim(0, 1) +
theme_minimal()
rm(list=ls())
library(knitr)
library(spaMM)
library(tidyverse)
library(splines)
library(foreach)
library(doParallel)
setwd("/media/loic/Commun/0Travail/Stage 2025 ISEM/Code")
IPM_data <- read.csv("newdata.csv")
centauree_data <- IPM_data[!is.na(IPM_data$Size0Mars) & !is.na(IPM_data$Age),]
centauree_data$Age[centauree_data$Age > 8] <- 8
spaMM.options(separation_max=70)
# Random effects
r_effects <- c("year", "Pop")
# Fixed effects on which random effects have an effect
f_effects <- c("1", "Size0Mars", "Age", "Size0Mars + Age")
# Combinations (fixed effects | random effect)
ran_combinations <- sapply(f_effects, function(feffect) {
sapply(r_effects, function(reffect) {
paste0("(", feffect, "|", reffect, ")")
})
})
# Add individual effect
random_effects <- c(as.vector(ran_combinations),"1","(1|Individu)")
# Size fixed effect
size_effects <- c("Size0Mars","poly(Size0Mars,2)","bs(Size0Mars,df=4,degree=2)","bs(Size0Mars,df=3,degree=2)",
"poly(Size0Mars,3)","bs(Size0Mars,df=5,degree=3)","poly(Size0Mars,4)")
# Age fixed effect
age_effects <- c("Age", "poly(Age,2)", "bs(Age,degree=2,knots=6.5)", "poly(Age,3)", "bs(Age,degree=3,knots=6.5)", "bs(Age,degree=3,knots=c(1.5,6.5))", "poly(Age,4)")
age_effects2 <- c("Age", "poly(Age,2)", "bs(Age,degree=2,knots=6.5)", "poly(Age,3)", "bs(Age,degree=3,knots=6.5)", "poly(Age,4)") #splines with only one knot
age_effects3 <- c("Age", "poly(Age,2)", "poly(Age,3)", "poly(Age,4)") #no splines
#Fonctions that remove unecessary repetitions
# Example: if there is 2 random effects (x|year) we remove the combination from the list.
is_valid_combination <- function(comb) {
comb <- sort(comb)  # Trier pour vérifier l'ordre
if (sum(grepl("\\|year", comb)) >= 2) return(FALSE)
if (sum(grepl("\\|Pop", comb)) >= 2) return(FALSE)
if (sum(grepl("\\|Individu", comb)) >= 2) return(FALSE)
if (!"1" %in% comb) return(FALSE) # 1 for intercept is needed for all combinations
return(TRUE)
}
# Remove individual effect
individual_combination <- function(comb){
if ("(1|Individu)" %in% comb) return(FALSE)
return(TRUE)
}
# Function that removes non-performing combinations where there is a random individual effect (for survival age>1).
is_valid_Individu <- function(comb){
if ("(1|Individu)" %in% comb && any(grepl("^bs", comb))) return(FALSE)
if ("(1|Individu)" %in% comb && "(Size0Mars + Age|year)" %in% comb) return(FALSE)
if ("(1|Individu)" %in% comb && "(Age|year)" %in% comb) return(FALSE)
if ("(1|Individu)" %in% comb && "(Size0Mars|year)" %in% comb) return(FALSE)
if ("(1|Individu)" %in% comb && "(Size0Mars + Age|Pop)" %in% comb) return(FALSE)
if ("(1|Individu)" %in% comb && "(Age|Pop)" %in% comb) return(FALSE)
if ("(1|Individu)" %in% comb && "(Size0Mars|Pop)" %in% comb) return(FALSE)
return(TRUE)
}
# Function that removes combinations where there is a spline function and the random effect individual
is_valid_Individu2 <- function(comb){
if ("(1|Individu)" %in% comb && any(grepl("^bs", comb))) return(FALSE)
return(TRUE)
}
# Remove combination where there is age in random effect (for seedling survival)
rage_combination <- function(comb){
if ("(Age|Pop)" %in% comb) return(FALSE)
if ("(Size0Mars + Age|Pop)" %in% comb) return(FALSE)
if ("(Age|year)" %in% comb) return(FALSE)
if ("(Size0Mars + Age|year)" %in% comb) return(FALSE)
return(TRUE)
}
combinations <- list()
# Combinations of all random effects
for (n in 1:length(random_effects)) {
combinations <- c(combinations, combn(random_effects, n, simplify = FALSE))
}
combinations <- Filter(is_valid_combination, combinations)
combi <- combinations
# Add size combinations
for (s in size_effects) {
for (combo in combi) {
combinations <- c(combinations, list(c(s, combo)))
}
}
combi_surv1 <- combinations
combi <- combinations
combi2 <- combinations
combi3 <- combinations
# Add all possible age combinations
for (a in age_effects) {
for (combo in combinations) {
combi <- c(combi, list(c(a, combo)))
}
}
# Add spline simplified age combinations
for (a in age_effects2) {
for (combo in combinations) {
combi2 <- c(combi2, list(c(a, combo)))
}
}
# Add age combinations without spline
for (a in age_effects3) {
for (combo in combinations) {
combi3 <- c(combi3, list(c(a, combo)))
}
}
validIndividu2 <- Filter(is_valid_Individu,combi2) # Combinaisons simplifiée de l'effet individus
combi_flow <- Filter(is_valid_Individu2,combi3) # Flowering combinations
combi_notInd <- Filter(individual_combination,combi) # Combinations without individual effect
combi_surv1 <- Filter(individual_combination,combi_surv1)
combi_surv1 <- Filter(rage_combination,combi_surv1) # Seedling survival combinations
combi_surv2 <- Filter(is_valid_Individu,combi) # Rosette survival combinations
combi_plantule <- c("1","1 + (1|year) + (1|Pop) + (1|Pop:year)","1 + (1|year) + (1|Pop)","1 + (1|year) + (1|Pop:year)","1 + (1|Pop) + (1|Pop:year)","1 + (1|year)","1 + (1|Pop)","1 + (1|Pop:year)")
# Remplace size par log(size)
combi_growth_log <- lapply(combi_notInd, function(x) gsub("Size0Mars", "log(Size0Mars)", x))
combi_growthIndividu_log <- lapply(validIndividu2, function(x) gsub("Size0Mars", "log(Size0Mars)", x))
combi_resvar <- c("1","log(Age)","log(Size0Mars)","log(Size0Mars) + log(Age)")
# N the number of subjects
# ntot the total number of observations
extractBIC <- function(fit, ntot, N=1){
extractAIC(fit)[[2]] +(log(ntot)-2)*DoF(fit)[[3]] + log(N)*DoF(fit)[[1]]
}
rm(list=ls())
library(knitr)
library(spaMM)
library(tidyverse)
library(splines)
library(foreach)
library(doParallel)
setwd("/media/loic/Commun/0Travail/Stage 2025 ISEM/Code")
IPM_data <- read.csv("newdata.csv")
centauree_data <- IPM_data[!is.na(IPM_data$Size0Mars) & !is.na(IPM_data$Age),]
centauree_data$Age[centauree_data$Age > 8] <- 8
spaMM.options(separation_max=70)
# Random effects
r_effects <- c("year", "Pop")
# Fixed effects on which random effects have an effect
f_effects <- c("1", "Size0Mars", "Age", "Size0Mars + Age")
# Combinations (fixed effects | random effect)
ran_combinations <- sapply(f_effects, function(feffect) {
sapply(r_effects, function(reffect) {
paste0("(", feffect, "|", reffect, ")")
})
})
# Add individual effect
random_effects <- c(as.vector(ran_combinations),"1","(1|Individu)")
# Size fixed effect
size_effects <- c("Size0Mars","poly(Size0Mars,2)","bs(Size0Mars,df=4,degree=2)","bs(Size0Mars,df=3,degree=2)",
"poly(Size0Mars,3)","bs(Size0Mars,df=5,degree=3)","poly(Size0Mars,4)")
# Age fixed effect
age_effects <- c("Age", "poly(Age,2)", "bs(Age,degree=2,knots=6.5)", "poly(Age,3)", "bs(Age,degree=3,knots=6.5)", "bs(Age,degree=3,knots=c(1.5,6.5))", "poly(Age,4)")
age_effects2 <- c("Age", "poly(Age,2)", "bs(Age,degree=2,knots=6.5)", "poly(Age,3)", "bs(Age,degree=3,knots=6.5)", "poly(Age,4)") #splines with only one knot
age_effects3 <- c("Age", "poly(Age,2)", "poly(Age,3)", "poly(Age,4)") #no splines
#Fonctions that remove unecessary repetitions
# Example: if there is 2 random effects (x|year) we remove the combination from the list.
is_valid_combination <- function(comb) {
comb <- sort(comb)  # Trier pour vérifier l'ordre
if (sum(grepl("\\|year", comb)) >= 2) return(FALSE)
if (sum(grepl("\\|Pop", comb)) >= 2) return(FALSE)
if (sum(grepl("\\|Individu", comb)) >= 2) return(FALSE)
if (!"1" %in% comb) return(FALSE) # 1 for intercept is needed for all combinations
return(TRUE)
}
# Remove individual effect
individual_combination <- function(comb){
if ("(1|Individu)" %in% comb) return(FALSE)
return(TRUE)
}
# Function that removes non-performing combinations where there is a random individual effect (for survival age>1).
is_valid_Individu <- function(comb){
if ("(1|Individu)" %in% comb && any(grepl("^bs", comb))) return(FALSE)
if ("(1|Individu)" %in% comb && "(Size0Mars + Age|year)" %in% comb) return(FALSE)
if ("(1|Individu)" %in% comb && "(Age|year)" %in% comb) return(FALSE)
if ("(1|Individu)" %in% comb && "(Size0Mars|year)" %in% comb) return(FALSE)
if ("(1|Individu)" %in% comb && "(Size0Mars + Age|Pop)" %in% comb) return(FALSE)
if ("(1|Individu)" %in% comb && "(Age|Pop)" %in% comb) return(FALSE)
if ("(1|Individu)" %in% comb && "(Size0Mars|Pop)" %in% comb) return(FALSE)
return(TRUE)
}
# Function that removes combinations where there is a spline function and the random effect individual
is_valid_Individu2 <- function(comb){
if ("(1|Individu)" %in% comb && any(grepl("^bs", comb))) return(FALSE)
return(TRUE)
}
# Remove combination where there is age in random effect (for seedling survival)
rage_combination <- function(comb){
if ("(Age|Pop)" %in% comb) return(FALSE)
if ("(Size0Mars + Age|Pop)" %in% comb) return(FALSE)
if ("(Age|year)" %in% comb) return(FALSE)
if ("(Size0Mars + Age|year)" %in% comb) return(FALSE)
return(TRUE)
}
combinations <- list()
# Combinations of all random effects
for (n in 1:length(random_effects)) {
combinations <- c(combinations, combn(random_effects, n, simplify = FALSE))
}
combinations <- Filter(is_valid_combination, combinations)
combi <- combinations
# Add size combinations
for (s in size_effects) {
for (combo in combi) {
combinations <- c(combinations, list(c(s, combo)))
}
}
combi_surv1 <- combinations
combi <- combinations
combi2 <- combinations
combi3 <- combinations
# Add all possible age combinations
for (a in age_effects) {
for (combo in combinations) {
combi <- c(combi, list(c(a, combo)))
}
}
# Add spline simplified age combinations
for (a in age_effects2) {
for (combo in combinations) {
combi2 <- c(combi2, list(c(a, combo)))
}
}
# Add age combinations without spline
for (a in age_effects3) {
for (combo in combinations) {
combi3 <- c(combi3, list(c(a, combo)))
}
}
validIndividu2 <- Filter(is_valid_Individu,combi2) # Combinaisons simplifiée de l'effet individus
combi_flow <- Filter(is_valid_Individu2,combi3) # Flowering combinations
combi_notInd <- Filter(individual_combination,combi) # Combinations without individual effect
combi_surv1 <- Filter(individual_combination,combi_surv1)
combi_surv1 <- Filter(rage_combination,combi_surv1) # Seedling survival combinations
combi_surv2 <- Filter(is_valid_Individu,combi) # Rosette survival combinations
combi_plantule <- c("1","1 + (1|year) + (1|Pop) + (1|Pop:year)","1 + (1|year) + (1|Pop)","1 + (1|year) + (1|Pop:year)","1 + (1|Pop) + (1|Pop:year)","1 + (1|year)","1 + (1|Pop)","1 + (1|Pop:year)")
# Remplace size par log(size)
combi_growth_log <- lapply(combi_notInd, function(x) gsub("Size0Mars", "log(Size0Mars)", x))
combi_growthIndividu_log <- lapply(validIndividu2, function(x) gsub("Size0Mars", "log(Size0Mars)", x))
combi_resvar <- c("1","log(Age)","log(Size0Mars)","log(Size0Mars) + log(Age)")
# N the number of subjects
# ntot the total number of observations
extractBIC <- function(fit, ntot, N=1){
extractAIC(fit)[[2]] +(log(ntot)-2)*DoF(fit)[[3]] + log(N)*DoF(fit)[[1]]
}
i <- 1L
combi_fleur <- list()
# combi_fleur2 <- list()
for (set_effects in combi_flow) {
effect_formula <- paste(unlist(set_effects), collapse = "+")
formula <- as.formula(paste("Flowering0", "~", effect_formula))
if (is_separated.formula(formula, data = centauree_data, method = "PQL/L") == FALSE){
combi_fleur[[i]] <- set_effects
i <- i + 1L
}
}
i <- 1L
combi_fleur <- list()
# combi_fleur2 <- list()
for (set_effects in combi_flow) {
effect_formula <- paste(unlist(set_effects), collapse = "+")
formula <- as.formula(paste("Flowering", "~", effect_formula))
if (is_separated.formula(formula, data = centauree_data, method = "PQL/L") == FALSE){
combi_fleur[[i]] <- set_effects
i <- i + 1L
}
}
combi_fleur
fitme(Flowering ~ 1+ poly(Size0Mars,4) + (Size0Mars+Age|year)+poly(Age,3)+(Size0Mars+Age|Pop),
family=binomial,
data=Flowdata1,
method="PQL/L")
fitme(Flowering ~ 1+ poly(Size0Mars,4) + (Size0Mars+Age|year)+poly(Age,3)+(Size0Mars+Age|Pop),
family=binomial,
data=centauree_data,
method="PQL/L")
rm(list=ls())
library(knitr)
library(spaMM)
library(tidyverse)
library(splines)
library(foreach)
library(doParallel)
setwd("/media/loic/Commun/0Travail/Stage 2025 ISEM/Code")
IPM_data <- read.csv("newdata.csv")
centauree_data <- IPM_data[!is.na(IPM_data$Size0Mars) & !is.na(IPM_data$Age),]
centauree_data$Age[centauree_data$Age > 8] <- 8
spaMM.options(separation_max=70)
# Random effects
r_effects <- c("year", "Pop")
# Fixed effects on which random effects have an effect
f_effects <- c("1", "Size0Mars", "Age", "Size0Mars + Age")
# Combinations (fixed effects | random effect)
ran_combinations <- sapply(f_effects, function(feffect) {
sapply(r_effects, function(reffect) {
paste0("(", feffect, "|", reffect, ")")
})
})
# Add individual effect
random_effects <- c(as.vector(ran_combinations),"1","(1|Individu)")
# Size fixed effect
size_effects <- c("Size0Mars","poly(Size0Mars,2)","bs(Size0Mars,df=4,degree=2)","bs(Size0Mars,df=3,degree=2)",
"poly(Size0Mars,3)","bs(Size0Mars,df=5,degree=3)","poly(Size0Mars,4)")
# Age fixed effect
age_effects <- c("Age", "poly(Age,2)", "bs(Age,degree=2,knots=6.5)", "poly(Age,3)", "bs(Age,degree=3,knots=6.5)", "bs(Age,degree=3,knots=c(1.5,6.5))", "poly(Age,4)")
age_effects2 <- c("Age", "poly(Age,2)", "bs(Age,degree=2,knots=6.5)", "poly(Age,3)", "bs(Age,degree=3,knots=6.5)", "poly(Age,4)") #splines with only one knot
age_effects3 <- c("Age", "poly(Age,2)", "poly(Age,3)", "poly(Age,4)") #no splines
#Fonctions that remove unecessary repetitions
# Example: if there is 2 random effects (x|year) we remove the combination from the list.
is_valid_combination <- function(comb) {
comb <- sort(comb)  # Trier pour vérifier l'ordre
if (sum(grepl("\\|year", comb)) >= 2) return(FALSE)
if (sum(grepl("\\|Pop", comb)) >= 2) return(FALSE)
if (sum(grepl("\\|Individu", comb)) >= 2) return(FALSE)
if (!"1" %in% comb) return(FALSE) # 1 for intercept is needed for all combinations
return(TRUE)
}
# Remove individual effect
individual_combination <- function(comb){
if ("(1|Individu)" %in% comb) return(FALSE)
return(TRUE)
}
# Function that removes non-performing combinations where there is a random individual effect (for survival age>1).
is_valid_Individu <- function(comb){
if ("(1|Individu)" %in% comb && any(grepl("^bs", comb))) return(FALSE)
if ("(1|Individu)" %in% comb && "(Size0Mars + Age|year)" %in% comb) return(FALSE)
if ("(1|Individu)" %in% comb && "(Age|year)" %in% comb) return(FALSE)
if ("(1|Individu)" %in% comb && "(Size0Mars|year)" %in% comb) return(FALSE)
if ("(1|Individu)" %in% comb && "(Size0Mars + Age|Pop)" %in% comb) return(FALSE)
if ("(1|Individu)" %in% comb && "(Age|Pop)" %in% comb) return(FALSE)
if ("(1|Individu)" %in% comb && "(Size0Mars|Pop)" %in% comb) return(FALSE)
return(TRUE)
}
# Function that removes combinations where there is a spline function and the random effect individual
is_valid_Individu2 <- function(comb){
if ("(1|Individu)" %in% comb && any(grepl("^bs", comb))) return(FALSE)
return(TRUE)
}
# Remove combination where there is age in random effect (for seedling survival)
rage_combination <- function(comb){
if ("(Age|Pop)" %in% comb) return(FALSE)
if ("(Size0Mars + Age|Pop)" %in% comb) return(FALSE)
if ("(Age|year)" %in% comb) return(FALSE)
if ("(Size0Mars + Age|year)" %in% comb) return(FALSE)
return(TRUE)
}
combinations <- list()
# Combinations of all random effects
for (n in 1:length(random_effects)) {
combinations <- c(combinations, combn(random_effects, n, simplify = FALSE))
}
combinations <- Filter(is_valid_combination, combinations)
combi <- combinations
# Add size combinations
for (s in size_effects) {
for (combo in combi) {
combinations <- c(combinations, list(c(s, combo)))
}
}
combi_surv1 <- combinations
combi <- combinations
combi2 <- combinations
combi3 <- combinations
# Add all possible age combinations
for (a in age_effects) {
for (combo in combinations) {
combi <- c(combi, list(c(a, combo)))
}
}
# Add spline simplified age combinations
for (a in age_effects2) {
for (combo in combinations) {
combi2 <- c(combi2, list(c(a, combo)))
}
}
# Add age combinations without spline
for (a in age_effects3) {
for (combo in combinations) {
combi3 <- c(combi3, list(c(a, combo)))
}
}
validIndividu2 <- Filter(is_valid_Individu,combi2) # Combinaisons simplifiée de l'effet individus
combi_flow <- Filter(individual_combination,combi3) # Flowering combinations
combi_notInd <- Filter(individual_combination,combi) # Combinations without individual effect
combi_surv1 <- Filter(individual_combination,combi_surv1)
combi_surv1 <- Filter(rage_combination,combi_surv1) # Seedling survival combinations
combi_surv2 <- Filter(is_valid_Individu,combi) # Rosette survival combinations
combi_plantule <- c("1","1 + (1|year) + (1|Pop) + (1|Pop:year)","1 + (1|year) + (1|Pop)","1 + (1|year) + (1|Pop:year)","1 + (1|Pop) + (1|Pop:year)","1 + (1|year)","1 + (1|Pop)","1 + (1|Pop:year)")
# Remplace size par log(size)
combi_growth_log <- lapply(combi_notInd, function(x) gsub("Size0Mars", "log(Size0Mars)", x))
combi_growthIndividu_log <- lapply(validIndividu2, function(x) gsub("Size0Mars", "log(Size0Mars)", x))
combi_resvar <- c("1","log(Age)","log(Size0Mars)","log(Size0Mars) + log(Age)")
# N the number of subjects
# ntot the total number of observations
extractBIC <- function(fit, ntot, N=1){
extractAIC(fit)[[2]] +(log(ntot)-2)*DoF(fit)[[3]] + log(N)*DoF(fit)[[1]]
}
i <- 1L
combi_fleur <- list()
# combi_fleur2 <- list()
for (set_effects in combi_flow) {
effect_formula <- paste(unlist(set_effects), collapse = "+")
formula <- as.formula(paste("Flowering", "~", effect_formula))
if (is_separated.formula(formula, data = centauree_data, method = "PQL/L") == FALSE){
combi_fleur[[i]] <- set_effects
i <- i + 1L
}
}
View(combi_fleur)
resp <- "Flowering"
ntot <- length(centauree_data$Individu)
combi <- combi_fleur
ls <- length(combi)
cl <- makeCluster(10)
registerDoParallel(cl)
result <- foreach(i=1:ls, .packages=c("splines","spaMM")) %dopar% {
set_effects <- combi[i]
effect_formula <- paste(unlist(set_effects), collapse = "+")
formula <- as.formula(paste(resp, "~", effect_formula))
fit <- fitme(formula, data = centauree_data, family=binomial, method = "PQL/L")
c(extractAIC(fit)[[2]],extractBIC(fit,ntot),set_effects)
}
